{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nconst startButton = document.querySelector('[data-start]');\nlet countdownInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n  },\n};\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  flatpickr('#datetime-picker', {\n    ...options,\n    enableTime: true,\n    dateFormat: 'Y-m-d H:i',\n    onClose: function (selectedDates) {\n      userSelectedDate = selectedDates[0];\n      if (userSelectedDate < new Date()) {\n        iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future',\n        });\n        startButton.disabled = true;\n        clearInterval(countdownInterval);\n      } else {\n        startButton.disabled = false;\n      }\n    },\n  });\n});\n\nconst daysElement = document.querySelector('[data-days]');\nconst hoursElement = document.querySelector('[data-hours]');\nconst minutesElement = document.querySelector('[data-minutes]');\nconst secondsElement = document.querySelector('[data-seconds]');\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimer() {\n  const now = new Date().getTime();\n  const targetDate = userSelectedDate.getTime();\n  const timeDifference = targetDate - now;\n\n  const { days, hours, minutes, seconds, milliseconds } =\n    convertMs(timeDifference);\n\n  if (timeDifference > 0) {\n    const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n\n    const hours = Math.floor(\n      (timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    const minutes = Math.floor(\n      (timeDifference % (1000 * 60 * 60)) / (1000 * 60)\n    );\n    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n\n    daysElement.textContent = addLeadingZero(days);\n    hoursElement.textContent = addLeadingZero(hours);\n    minutesElement.textContent = addLeadingZero(minutes);\n    secondsElement.textContent = addLeadingZero(seconds);\n  } else {\n    clearInterval(countdownInterval);\n    daysElement.textContent = '00';\n    hoursElement.textContent = '00';\n    minutesElement.textContent = '00';\n    secondsElement.textContent = '00';\n\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n    });\n  }\n}\n\nstartButton.addEventListener('click', function () {\n  const emptyInput = document.getElementById('datetime-picker');\n  if (!emptyInput.value) {\n    alert('Please fill the field before starting.');\n    return;\n  }\n\n  const selectedDateTime = new Date(userSelectedDate).getTime();\n  const now = new Date().getTime();\n\n  if (userSelectedDate < now) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n    });\n    return;\n  }\n  clearInterval(countdownInterval);\n  countdownInterval = setInterval(updateTimer, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n"],"names":["userSelectedDate","startButton","countdownInterval","options","selectedDates","flatpickr","iziToast","daysElement","hoursElement","minutesElement","secondsElement","addLeadingZero","value","updateTimer","now","timeDifference","days","hours","minutes","seconds","convertMs","ms"],"mappings":"sGAKA,IAAIA,EACJ,MAAMC,EAAc,SAAS,cAAc,cAAc,EACzD,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,CAC7B,CACH,EAEA,SAAS,iBAAiB,mBAAoB,UAAY,CACxDC,EAAU,mBAAoB,CAC5B,GAAGF,EACH,WAAY,GACZ,WAAY,YACZ,QAAS,SAAUC,EAAe,CAChCJ,EAAmBI,EAAc,CAAC,EAC9BJ,EAAmB,IAAI,MACzBM,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACnB,CAAS,EACDL,EAAY,SAAW,GACvB,cAAcC,CAAiB,GAE/BD,EAAY,SAAW,EAE1B,CACL,CAAG,CACH,CAAC,EAED,MAAMM,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAE9D,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,GAAc,CACrB,MAAMC,EAAM,IAAI,KAAM,EAAC,QAAO,EAExBC,EADaf,EAAiB,UACAc,EAKpC,GAAIC,EAAiB,EAAG,CACtB,MAAMC,EAAO,KAAK,MAAMD,EAAkB,KAAoB,EAExDE,EAAQ,KAAK,MAChBF,GAAkB,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAC9D,EACUG,EAAU,KAAK,MAClBH,GAAkB,IAAO,GAAK,KAAQ,IAAO,GACpD,EACUI,EAAU,KAAK,MAAOJ,GAAkB,IAAO,IAAO,GAAI,EAEhER,EAAY,YAAcI,EAAeK,CAAI,EAC7CR,EAAa,YAAcG,EAAeM,CAAK,EAC/CR,EAAe,YAAcE,EAAeO,CAAO,EACnDR,EAAe,YAAcC,EAAeQ,CAAO,CACvD,MACI,cAAcjB,CAAiB,EAC/BK,EAAY,YAAc,KAC1BC,EAAa,YAAc,KAC3BC,EAAe,YAAc,KAC7BC,EAAe,YAAc,KAE7BJ,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACf,CAAK,CAEL,CAEAL,EAAY,iBAAiB,QAAS,UAAY,CAEhD,GAAI,CADe,SAAS,eAAe,iBAAiB,EAC5C,MAAO,CACrB,MAAM,wCAAwC,EAC9C,MACD,CAEwB,IAAI,KAAKD,CAAgB,EAAE,QAAU,EAC9D,MAAMc,EAAM,IAAI,KAAM,EAAC,QAAO,EAE9B,GAAId,EAAmBc,EAAK,CAC1BR,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACf,CAAK,EACD,MACD,CACD,cAAcJ,CAAiB,EAC/BA,EAAoB,YAAYW,EAAa,GAAI,CACnD,CAAC,EAED,SAASO,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIC,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}